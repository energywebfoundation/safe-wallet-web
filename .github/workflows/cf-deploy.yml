name: Deploy to Cloudfront's bucket

on:
  push:
    branches:
      [
        'feat/cicd'
      ]
jobs:
  cancel-previous:
    name: 'Cancel Previous Runs'
    runs-on: ubuntu-latest
    timeout-minutes: 3
    steps:
      - uses: styfle/cancel-workflow-action@0.8.0
        with:
          access_token: ${{ github.token }}
  env_name:
    runs-on: ubuntu-latest
    steps:
      - name: Get GHA environment name
        id: env_name 
        run: |
          echo "Running on branch ${{ github.ref }}"
          if [ "${{ github.ref }}" = "dev" ]; then
            echo "::set-output name=env_name::dev"
            echo "::set-output name=build_script::'yarn build && yarn export'"
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "::set-output name=env_name::prod"
            echo "::set-output name=build_script::yarn build && yarn export"
          fi
      - name: Use specified environment secrets from previous step
        run: |
          echo "Environment secrets set name ${{ steps.env_name.outputs.env_name }}"
          echo "Environment build script ${{ steps.env_name.outputs.build_script }}"
    outputs:
      env_name: ${{ steps.env_name.outputs.env_name }}
      env_file: ${{ steps.env_name.outputs.env_file }}
      build_script: ${{ steps.env_name.outputs.build_script }}
  deploy:
    environment:
      name: ${{ needs.env_name.outputs.env_name }}
    needs: [cancel-previous, env_name]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v2-beta
        with:
          node-version: '16.13.0'
          registry-url: https://registry.npmjs.org/
      - name: Yarn cache
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: web-core-modules-${{ hashFiles('**/yarn.lock') }}
    
      - name: Yarn install
        shell: bash
        run: yarn

      - name: Build branch
        run: |
          ${{ needs.env_name.outputs.build_script }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Clear bucket
        run: |
          aws s3 rm s3://${{ secrets.BUCKET_NAME }} --recursive
      - name: Upload to bucket
        run: |
          aws s3 cp out s3://${{ secrets.BUCKET_NAME }} --recursive
      - name: Invalidate CloudFront # cloudfront caches s3 content so after each deployment, it needs to be cleared.
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_ID }} --paths "/*"
